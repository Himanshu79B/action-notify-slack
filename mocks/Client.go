// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// PostMessageContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) PostMessageContext(_a0 context.Context, _a1 string, _a2 ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, ...slack.MsgOption) error); ok {
		r2 = rf(_a0, _a1, _a2...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMessageContext provides a mock function with given fields: ctx, channelID, timestamp, options
func (_m *Client) UpdateMessageContext(ctx context.Context, channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, channelID, timestamp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...slack.MsgOption) string); ok {
		r0 = rf(ctx, channelID, timestamp, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...slack.MsgOption) string); ok {
		r1 = rf(ctx, channelID, timestamp, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(context.Context, string, string, ...slack.MsgOption) string); ok {
		r2 = rf(ctx, channelID, timestamp, options...)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, ...slack.MsgOption) error); ok {
		r3 = rf(ctx, channelID, timestamp, options...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
